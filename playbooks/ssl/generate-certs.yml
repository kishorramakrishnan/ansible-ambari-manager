- hosts: ambari-server
  become: true
  tasks:
  - name: "Register JAVA_HOME"
    shell: "cat /etc/ambari-server/conf/ambari.properties | grep '^java.home=' | cut -d '=' -f 2"
    register: java_home
  - file: path=/var/lib/ambari-server/resources/ssl/ca state=absent
  - file: path=/var/lib/ambari-server/resources/ssl/keys state=absent
  - file: path=/var/lib/ambari-server/resources/ssl/cert state=absent
  - file: path=/var/lib/ambari-server/resources/ssl/csr state=absent
  - file: path=/var/lib/ambari-server/resources/ssl/pem state=absent
  - file: path=/var/lib/ambari-server/resources/ssl/truststore.jks state=absent
  - file: path=/var/lib/ambari-server/resources/ssl/cacerts state=absent
  - name: "Create ca folders"
    file:
      path: "/var/lib/ambari-server/resources/ssl/ca"
      state: directory
      owner: "{{ remote_ambari_server_user }}"
      group: "{{ remote_ambari_server_group }}"
      mode: 0775
  - name: "Create keys folders"
    file:
      path: "/var/lib/ambari-server/resources/ssl/keys"
      state: directory
      owner: "{{ remote_ambari_server_user }}"
      group: "{{ remote_ambari_server_group }}"
      mode: 0775
  - name: "Create cert folders"
    file:
      path: "/var/lib/ambari-server/resources/ssl/cert"
      state: directory
      owner: "{{ remote_ambari_server_user }}"
      group: "{{ remote_ambari_server_group }}"
      mode: 0775
  - name: "Create csr folders"
    file:
      path: "/var/lib/ambari-server/resources/ssl/csr"
      state: directory
      owner: "{{ remote_ambari_server_user }}"
      group: "{{ remote_ambari_server_group }}"
      mode: 0775
  - name: "Create PEM folders"
    file:
      path: "/var/lib/ambari-server/resources/ssl/pem"
      state: directory
      owner: "{{ remote_ambari_server_user }}"
      group: "{{ remote_ambari_server_group }}"
      mode: 0775
  - name: "Generate domain certificate and key"
    shell: "openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -subj '/C={{ ssl_C }}/ST={{ ssl_S }}/L={{ ssl_L }}/O={{ ssl_O }}/CN={{ ssl_D }}' -keyout /var/lib/ambari-server/resources/ssl/ca/{{ ssl_D }}.key  -out /var/lib/ambari-server/resources/ssl/ca/{{ ssl_D }}.cer"
  - name: "Generate jks file"
    shell: "shost=$(echo {{ item }} | cut -d . -f 1); {{ java_home['stdout'] }}/bin/keytool -genkey -noprompt -alias gateway-identity -keyalg RSA -dname 'CN={{ item }}, OU={{ ssl_OU }}, O={{ ssl_O }}, L={{ ssl_L }}, S={{ ssl_S }}, C={{ ssl_C }}' -keystore /var/lib/ambari-server/resources/ssl/keys/$shost.jks -storepass '{{ ssl_ks_password }}'  -keypass '{{ ssl_ks_password }}'"
    with_items:
    - "{{ groups['ambari-agent'] }}"
  - name: "Generate csrs"
    shell: "shost=$(echo {{ item }} | cut -d . -f 1); {{ java_home['stdout'] }}/bin/keytool -certreq -noprompt -alias gateway-identity -keyalg RSA -keystore /var/lib/ambari-server/resources/ssl/keys/$shost.jks -storepass '{{ ssl_ks_password }}' -keypass '{{ ssl_ks_password }}' > /var/lib/ambari-server/resources/ssl/csr/$shost.csr"
    with_items:
    - "{{ groups['ambari-agent'] }}"
  - name: "Sign csrs"
    shell: "shost=$(echo {{ item }} | cut -d . -f 1); openssl x509 -req -in /var/lib/ambari-server/resources/ssl/csr/$shost.csr -CA /var/lib/ambari-server/resources/ssl/ca/{{ ssl_D }}.cer -CAkey /var/lib/ambari-server/resources/ssl/ca/{{ ssl_D }}.key -CAcreateserial -out /var/lib/ambari-server/resources/ssl/cert/$shost.cer -days 1024 -sha256"
    with_items:
    - "{{ groups['ambari-agent'] }}"
  - name: "Generate Truststore"
    shell: "for cert in `ls /var/lib/ambari-server/resources/ssl/ca/*.cer`; do {{ java_home['stdout'] }}/bin/keytool -importcert -noprompt -file $cert -alias {{ ssl_D}}.cer -keystore /var/lib/ambari-server/resources/ssl/truststore.jks -storepass '{{ ssl_ts_password }}'; done"
  - name: "Import certs"
    shell: "shost=$(echo {{ item }} | cut -d . -f 1); for cert in `ls /var/lib/ambari-server/resources/ssl/ca/*.cer`; do {{ java_home['stdout'] }}/bin/keytool -importcert -noprompt -file $cert -alias {{ ssl_D}}.cer -keystore /var/lib/ambari-server/resources/ssl/keys/$shost.jks -storepass '{{ ssl_ks_password }}'; done; {{ java_home['stdout'] }}/bin/keytool -importcert -noprompt -alias gateway-identity -file /var/lib/ambari-server/resources/ssl/cert/$shost.cer -keystore /var/lib/ambari-server/resources/ssl/keys/$shost.jks -storepass '{{ ssl_ks_password }}'"
    with_items:
    - "{{ groups['ambari-agent'] }}"
  - name: "Generate PEMs"
    shell: |
      shost=$(echo {{ item }} | cut -d . -f 1);
      {{ java_home['stdout'] }}/bin/keytool -importkeystore -srckeystore /var/lib/ambari-server/resources/ssl/keys/$shost.jks \
        -srcstorepass {{ ssl_ks_password }} -srckeypass {{ ssl_ks_password }} -destkeystore /var/lib/ambari-server/resources/ssl/pem/$shost.p12 \
        -deststoretype PKCS12 -srcalias gateway-identity -deststorepass {{ ssl_ks_password }} -destkeypass {{ ssl_ks_password }}
      openssl pkcs12 -in /var/lib/ambari-server/resources/ssl/pem/$shost.p12 -passin pass:{{ ssl_ks_password }}  -nokeys -out /var/lib/ambari-server/resources/ssl/pem/$shost.pem
      openssl pkcs12 -in /var/lib/ambari-server/resources/ssl/pem/$shost.p12 -passin pass:{{ ssl_ks_password }} -passout pass:{{ ssl_ks_password }} -nocerts -out /var/lib/ambari-server/resources/ssl/pem/$shost.keytemp
      openssl rsa -in /var/lib/ambari-server/resources/ssl/pem/$shost.keytemp -passin pass:{{ ssl_ks_password }} -out /var/lib/ambari-server/resources/ssl/keys/$shost.key
      rm -f /var/lib/ambari-server/resources/ssl/pem/$shost.p12 /var/lib/ambari-server/resources/ssl/pem/$shost.keytemp
      rm -f /var/lib/ambari-server/resources/ssl/pem/$shost.keytemp
    with_items:
    - "{{ groups['ambari-agent'] }}"
  - name: "Update cacerts"
    shell: "cp {{ java_home['stdout'] }}/jre/lib/security/cacerts /var/lib/ambari-server/resources/ssl/ ; {{ java_home['stdout'] }}/bin/keytool -importcert -noprompt -file /var/lib/ambari-server/resources/ssl/ca/{{ ssl_D }}.cer -alias {{ ssl_D }} -keystore /var/lib/ambari-server/resources/ssl/cacerts -storepass changeit"
  - name: archive files
    shell: cd /var/lib/ambari-server/resources/ && tar -zczf ssl.tar.gz ssl